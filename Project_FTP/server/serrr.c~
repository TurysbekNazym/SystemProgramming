#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <signal.h>
#include <errno.h>
#include <time.h>
#include <sys/types.h>
/*for getting file size using stat()*/
#include<sys/stat.h>

/*for sendfile()*/
#include<sys/sendfile.h>

/*for O_RDONLY*/
#include<fcntl.h>

struct sockaddr_in cli_addr;
struct stat obj;// contains file information example size
char buf_user[255];
char buf_pass[255];
int n,m;
char *users[3]={"Aru","Nazym", "Assem"};
char *passwords[3]={"12345","123","111"};

char message[50]="You have logged in successfully";
char message2[50]="Your login or password incorrect";
int a,b;
char buf[100], command[5], filename[20],cmd[20];
int k, i, size, len, c;
int filehandle;
int cnt = 0;
struct workerArgs
{
    int socket;
};
 void error(const char *msg)//print error  message
{
  perror(msg);
  exit(1);
}

void Authorizhation(int newsockfd){

    bzero(buf_user, 20);
    n = read(newsockfd, buf_user, 20);
    bzero(buf_pass, 20);
    m = read(newsockfd, buf_pass, 20);
    if(n < 0 && m < 0)
       error("Error on reading");

    printf("Username: %s\n", buf_user);//message from client
   
    printf("Password: %s\n", buf_pass);//message from client
    
   int i = 0;
   for(i = 0; i < 3; i++ ){
     a = strncmp(users[i],buf_user,strlen(users[i]));
     b = strncmp(passwords[i],buf_pass, strlen(passwords[i]));

     printf("%d\n", a);
     printf("%d\n", b);

     if(a==0&&b==0){
        send(newsockfd, message, strlen(message),0);
        break;
     }  
     else{
        send(newsockfd, message2, strlen(message2),0);
        break;
      }
  }
}

void* SendFileToClient(int *arg)
{
   int newsockfd  =(int)*arg;
   printf("Connection accepted and id: %d\n",newsockfd);
 
   
   if(cnt == 0){
       printf("Hello!!!\n");
       Authorizhation(newsockfd);
    cnt++;
   }

  while(1){
    bzero(buf, 100);
    recv(newsockfd, buf, 100, 0);
    printf("%s\n", buf);
    sscanf(buf, "%s", command);// divide and get command

    if(strcmp(command,"get")==0)//get
    {
	  sscanf(buf, "%s%s", cmd, filename);
	  stat(filename, &obj);
	  filehandle = open(filename, O_RDONLY);
	  size = obj.st_size;
	  if(filehandle == -1)
	      size = 0;
	  send(newsockfd, &size, sizeof(int), 0);
	  if(size)
	  sendfile(newsockfd, filehandle, NULL, size);
      
   }
   else if(strcmp(command,"quit")==0)
   {
       printf("FTP server quitting..\n");
       int i = 1;
       send(newsockfd, &i, sizeof(int), 0);
       
   }
   else if(strcmp(command, "ls")==0)
   {
	system("ls >temps.txt");
	i = 0;
	stat("temps.txt",&obj);
	size = obj.st_size;
	send(newsockfd, &size, sizeof(int),0);
	filehandle = open("temps.txt", O_RDONLY);
	sendfile(newsockfd,filehandle,NULL,size);
    }
    else if(strcmp(command, "put") == 0)
        {
	  int c = 0, len;
	  char *f;
	  sscanf(buf+strlen(command), "%s", filename);
	  recv(newsockfd, &size, sizeof(int), 0);
	  i = 1;
	  while(1)
	    {
	      filehandle = open(filename, O_CREAT | O_EXCL | O_WRONLY, 0666);
	      if(filehandle == -1)
		{
		  sprintf(filename + strlen(filename), "%d", i);
		}
	      else
		break;
	    }
	  f = malloc(size);
	  recv(newsockfd, f, size, 0);
	  c = write(filehandle, f, size);
	  close(filehandle);
	  send(newsockfd, &c, sizeof(int), 0);
        }
    else if(strcmp(command, "cd")==0)
        {
          if(chdir(buf+3) == 0)
	    c = 1;
	  else
	    c = 0;
          send(newsockfd, &c, sizeof(int), 0);
        }
  }
   close(newsockfd);
   
   return;
}


void *accept_clients(void *args);

int main(int argc, char *argv[])
{

    

    printf("Hello Client");
    pthread_t server_thread;   
    sigset_t new;
    sigemptyset (&new);
    sigaddset(&new, SIGPIPE);
    if (pthread_sigmask(SIG_BLOCK, &new, NULL) != 0) 
    {
        perror("Unable to mask SIGPIPE");
        exit(-1);
    }

     if (pthread_create(&server_thread, NULL, accept_clients, NULL) < 0)
    {
        perror("Could not create server thread");
        exit(-1);
    }

    pthread_join(server_thread, NULL);
    pthread_exit(NULL);
//end of main
    
}
void *accept_clients(void *args)
{
   printf("\nCreation\n");
    pthread_t tid,l; 
    int sockfd,newsockfd,check,portnumber;
    struct sockaddr_in serv_addr;
    socklen_t clilen;
    struct workerArgs *wa;

    sockfd = socket(AF_INET, SOCK_STREAM, 0); // CREATING SOCKET
    if(sockfd < 0)
    {
     error("Error opening Socket");
    }
    
    bzero((char *)&serv_addr, sizeof(serv_addr)); //make zero
    portnumber = 2100;
   
    serv_addr.sin_family = AF_INET;//ipv4
    serv_addr.sin_addr.s_addr = inet_addr("10.42.0.196"); //127.0.0.1 10.42.0.196 172.16.86.121 
    serv_addr.sin_port = htons(portnumber);
     
    if(bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
      error("Binding failed");
   
    if(listen(sockfd, 10) == -1)
    {
        printf("Failed to listen\n");
        
    }
    int j = 0;
    while(1)
    { 
     
        clilen = sizeof(cli_addr);
        printf("Waiting...\n");   
        newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
        if(newsockfd < 0)
            printf("Error on Accept");
        printf("Connected to Clent: %s:%d\n",inet_ntoa(cli_addr.sin_addr),ntohs(cli_addr.sin_port));
        pthread_create(&tid, NULL,SendFileToClient, &newsockfd);
       bzero((char *)&cli_addr, sizeof(cli_addr));
    
   }
   int i = 0;
  

   close(newsockfd);
   close(sockfd);
  pthread_exit(NULL);
}
